{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":10907161,"sourceType":"datasetVersion","datasetId":6779600}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport geopandas as gpd\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder,LabelBinarizer,OneHotEncoder\n\n\nfrom sklearn.metrics import accuracy_score, f1_score\nimport xgboost as xgb\n\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.033381Z","iopub.execute_input":"2025-03-04T17:48:30.033683Z","iopub.status.idle":"2025-03-04T17:48:30.037837Z","shell.execute_reply.started":"2025-03-04T17:48:30.033662Z","shell.execute_reply":"2025-03-04T17:48:30.037046Z"}},"outputs":[],"execution_count":135},{"cell_type":"code","source":"train=pd.read_csv('/kaggle/input/amini-land-cover-classification/Task 1/train_land_cover_assignment.csv')\ntrain.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.112818Z","iopub.execute_input":"2025-03-04T17:48:30.113074Z","iopub.status.idle":"2025-03-04T17:48:30.259733Z","shell.execute_reply.started":"2025-03-04T17:48:30.113053Z","shell.execute_reply":"2025-03-04T17:48:30.259038Z"}},"outputs":[{"execution_count":136,"output_type":"execute_result","data":{"text/plain":"     subid       lat       lon building cropland wcover  bcount             x  \\\n0  1548937  7.387687 -4.780390       No       No   >60%     0.0 -2.714375e+06   \n1  1548936  8.690266 -5.770243       No      Yes   <30%     0.0 -2.812625e+06   \n2  1548935  8.518763 -2.808147       No      Yes   <30%     0.0 -2.495125e+06   \n3  1548934  8.637725 -3.048867       No       No   <30%     0.0 -2.520375e+06   \n4  1548933  7.993474 -6.044227       No       No   <30%     0.0 -2.846625e+06   \n\n               y    bd20  ...      mlon         nppm         npps   ph20  \\\n0  321874.969864  1.4900  ... -4.781606  5052.299805   853.451416  6.100   \n1  474124.973063  1.2925  ... -5.771476  5316.700195   933.074402  5.575   \n2  440374.986977  1.3050  ... -2.809363  4519.700195  1186.817627  5.850   \n3  454875.008083  1.3275  ... -3.050085  3439.800049   910.979309  5.950   \n4  396624.944149  1.4200  ... -6.045455  5226.899902   802.602661  5.800   \n\n       sirm      sirs     slope  snd20  soc20        tim  \n0  0.717054  0.008259  0.729217  66.75  12.25   8.079082  \n1  0.717198  0.007242  1.086981  51.50  14.25   9.549431  \n2  0.717171  0.006744  1.159993  47.00  14.50  10.523131  \n3  0.718244  0.007917  2.471163  62.75  12.75   9.305363  \n4  0.716653  0.007022  0.259416  55.00  13.25  15.732859  \n\n[5 rows x 49 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subid</th>\n      <th>lat</th>\n      <th>lon</th>\n      <th>building</th>\n      <th>cropland</th>\n      <th>wcover</th>\n      <th>bcount</th>\n      <th>x</th>\n      <th>y</th>\n      <th>bd20</th>\n      <th>...</th>\n      <th>mlon</th>\n      <th>nppm</th>\n      <th>npps</th>\n      <th>ph20</th>\n      <th>sirm</th>\n      <th>sirs</th>\n      <th>slope</th>\n      <th>snd20</th>\n      <th>soc20</th>\n      <th>tim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1548937</td>\n      <td>7.387687</td>\n      <td>-4.780390</td>\n      <td>No</td>\n      <td>No</td>\n      <td>&gt;60%</td>\n      <td>0.0</td>\n      <td>-2.714375e+06</td>\n      <td>321874.969864</td>\n      <td>1.4900</td>\n      <td>...</td>\n      <td>-4.781606</td>\n      <td>5052.299805</td>\n      <td>853.451416</td>\n      <td>6.100</td>\n      <td>0.717054</td>\n      <td>0.008259</td>\n      <td>0.729217</td>\n      <td>66.75</td>\n      <td>12.25</td>\n      <td>8.079082</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1548936</td>\n      <td>8.690266</td>\n      <td>-5.770243</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>&lt;30%</td>\n      <td>0.0</td>\n      <td>-2.812625e+06</td>\n      <td>474124.973063</td>\n      <td>1.2925</td>\n      <td>...</td>\n      <td>-5.771476</td>\n      <td>5316.700195</td>\n      <td>933.074402</td>\n      <td>5.575</td>\n      <td>0.717198</td>\n      <td>0.007242</td>\n      <td>1.086981</td>\n      <td>51.50</td>\n      <td>14.25</td>\n      <td>9.549431</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1548935</td>\n      <td>8.518763</td>\n      <td>-2.808147</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>&lt;30%</td>\n      <td>0.0</td>\n      <td>-2.495125e+06</td>\n      <td>440374.986977</td>\n      <td>1.3050</td>\n      <td>...</td>\n      <td>-2.809363</td>\n      <td>4519.700195</td>\n      <td>1186.817627</td>\n      <td>5.850</td>\n      <td>0.717171</td>\n      <td>0.006744</td>\n      <td>1.159993</td>\n      <td>47.00</td>\n      <td>14.50</td>\n      <td>10.523131</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1548934</td>\n      <td>8.637725</td>\n      <td>-3.048867</td>\n      <td>No</td>\n      <td>No</td>\n      <td>&lt;30%</td>\n      <td>0.0</td>\n      <td>-2.520375e+06</td>\n      <td>454875.008083</td>\n      <td>1.3275</td>\n      <td>...</td>\n      <td>-3.050085</td>\n      <td>3439.800049</td>\n      <td>910.979309</td>\n      <td>5.950</td>\n      <td>0.718244</td>\n      <td>0.007917</td>\n      <td>2.471163</td>\n      <td>62.75</td>\n      <td>12.75</td>\n      <td>9.305363</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1548933</td>\n      <td>7.993474</td>\n      <td>-6.044227</td>\n      <td>No</td>\n      <td>No</td>\n      <td>&lt;30%</td>\n      <td>0.0</td>\n      <td>-2.846625e+06</td>\n      <td>396624.944149</td>\n      <td>1.4200</td>\n      <td>...</td>\n      <td>-6.045455</td>\n      <td>5226.899902</td>\n      <td>802.602661</td>\n      <td>5.800</td>\n      <td>0.716653</td>\n      <td>0.007022</td>\n      <td>0.259416</td>\n      <td>55.00</td>\n      <td>13.25</td>\n      <td>15.732859</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 49 columns</p>\n</div>"},"metadata":{}}],"execution_count":136},{"cell_type":"code","source":"test=pd.read_csv('/kaggle/input/amini-land-cover-classification/Task 1/test_land_cover_assignment.csv')\ntest.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.260756Z","iopub.execute_input":"2025-03-04T17:48:30.261004Z","iopub.status.idle":"2025-03-04T17:48:30.283868Z","shell.execute_reply.started":"2025-03-04T17:48:30.260984Z","shell.execute_reply":"2025-03-04T17:48:30.283158Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":137,"output_type":"execute_result","data":{"text/plain":"     subid       lat       lon  bcount             x              y    bd20  \\\n0  1548905  4.824505 -7.522892     NaN -3.023125e+06   44125.021587  1.4075   \n1  1548829  5.457730 -5.010404     NaN -2.749125e+06  104624.973824  1.6350   \n2  1548811  5.081743 -7.148626     NaN -2.981625e+06   71625.015246  1.5825   \n3  1548806  5.673164 -4.171414     NaN -2.657375e+06  125374.968207  1.7350   \n4  1548798  4.665885 -7.040600     NaN -2.971875e+06   23875.013622  1.5925   \n\n   bio1  bio12  bio7  ...      mlon          nppm         npps   ph20  \\\n0   250   2564    46  ... -7.524098  12909.700195   870.217346  5.025   \n1   261   1378    71  ... -5.011604  12288.299805   839.143616  4.850   \n2   247   1704    46  ... -7.149833  13374.500000   763.726135  5.100   \n3   261   1700    68  ... -4.172613  11717.200195   814.182434  5.125   \n4   259   1724    61  ... -7.041802   3474.800049  1809.494385  4.950   \n\n       sirm      sirs     slope  snd20  soc20        tim  \n0  0.719068  0.007398  4.093175  64.50  23.50   9.168183  \n1  0.724049  0.007270  0.487844  65.75  13.00   7.896024  \n2  0.720274  0.006467  2.113945  52.00  23.25   7.606022  \n3  0.724026  0.007111  0.962922  59.75  15.00   8.471351  \n4  0.716632  0.007030  0.779259  70.50  15.75  13.725027  \n\n[5 rows x 46 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subid</th>\n      <th>lat</th>\n      <th>lon</th>\n      <th>bcount</th>\n      <th>x</th>\n      <th>y</th>\n      <th>bd20</th>\n      <th>bio1</th>\n      <th>bio12</th>\n      <th>bio7</th>\n      <th>...</th>\n      <th>mlon</th>\n      <th>nppm</th>\n      <th>npps</th>\n      <th>ph20</th>\n      <th>sirm</th>\n      <th>sirs</th>\n      <th>slope</th>\n      <th>snd20</th>\n      <th>soc20</th>\n      <th>tim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1548905</td>\n      <td>4.824505</td>\n      <td>-7.522892</td>\n      <td>NaN</td>\n      <td>-3.023125e+06</td>\n      <td>44125.021587</td>\n      <td>1.4075</td>\n      <td>250</td>\n      <td>2564</td>\n      <td>46</td>\n      <td>...</td>\n      <td>-7.524098</td>\n      <td>12909.700195</td>\n      <td>870.217346</td>\n      <td>5.025</td>\n      <td>0.719068</td>\n      <td>0.007398</td>\n      <td>4.093175</td>\n      <td>64.50</td>\n      <td>23.50</td>\n      <td>9.168183</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1548829</td>\n      <td>5.457730</td>\n      <td>-5.010404</td>\n      <td>NaN</td>\n      <td>-2.749125e+06</td>\n      <td>104624.973824</td>\n      <td>1.6350</td>\n      <td>261</td>\n      <td>1378</td>\n      <td>71</td>\n      <td>...</td>\n      <td>-5.011604</td>\n      <td>12288.299805</td>\n      <td>839.143616</td>\n      <td>4.850</td>\n      <td>0.724049</td>\n      <td>0.007270</td>\n      <td>0.487844</td>\n      <td>65.75</td>\n      <td>13.00</td>\n      <td>7.896024</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1548811</td>\n      <td>5.081743</td>\n      <td>-7.148626</td>\n      <td>NaN</td>\n      <td>-2.981625e+06</td>\n      <td>71625.015246</td>\n      <td>1.5825</td>\n      <td>247</td>\n      <td>1704</td>\n      <td>46</td>\n      <td>...</td>\n      <td>-7.149833</td>\n      <td>13374.500000</td>\n      <td>763.726135</td>\n      <td>5.100</td>\n      <td>0.720274</td>\n      <td>0.006467</td>\n      <td>2.113945</td>\n      <td>52.00</td>\n      <td>23.25</td>\n      <td>7.606022</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1548806</td>\n      <td>5.673164</td>\n      <td>-4.171414</td>\n      <td>NaN</td>\n      <td>-2.657375e+06</td>\n      <td>125374.968207</td>\n      <td>1.7350</td>\n      <td>261</td>\n      <td>1700</td>\n      <td>68</td>\n      <td>...</td>\n      <td>-4.172613</td>\n      <td>11717.200195</td>\n      <td>814.182434</td>\n      <td>5.125</td>\n      <td>0.724026</td>\n      <td>0.007111</td>\n      <td>0.962922</td>\n      <td>59.75</td>\n      <td>15.00</td>\n      <td>8.471351</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1548798</td>\n      <td>4.665885</td>\n      <td>-7.040600</td>\n      <td>NaN</td>\n      <td>-2.971875e+06</td>\n      <td>23875.013622</td>\n      <td>1.5925</td>\n      <td>259</td>\n      <td>1724</td>\n      <td>61</td>\n      <td>...</td>\n      <td>-7.041802</td>\n      <td>3474.800049</td>\n      <td>1809.494385</td>\n      <td>4.950</td>\n      <td>0.716632</td>\n      <td>0.007030</td>\n      <td>0.779259</td>\n      <td>70.50</td>\n      <td>15.75</td>\n      <td>13.725027</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 46 columns</p>\n</div>"},"metadata":{}}],"execution_count":137},{"cell_type":"code","source":"metadata=pd.read_csv('/kaggle/input/amini-land-cover-classification/Task 1/CIV_grids.csv')\nmetadata.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.284726Z","iopub.execute_input":"2025-03-04T17:48:30.284907Z","iopub.status.idle":"2025-03-04T17:48:30.294491Z","shell.execute_reply.started":"2025-03-04T17:48:30.284891Z","shell.execute_reply":"2025-03-04T17:48:30.293704Z"}},"outputs":[{"execution_count":138,"output_type":"execute_result","data":{"text/plain":"  Variable name                                        Description  \\\n0          bd20          Topsoil bulk density (Mg/m^3, soil fines)   \n1          bio1   Mean annual temperature (deg. C * 10, 1979-2013)   \n2          bio7  Mean annual temperature range (deg. C * 10, 19...   \n3         bio12       Mean annual precipitation (mm/yr, 1979-2013)   \n4         bio15          Mean rainfall seasonality (CV, 1979-2013)   \n\n  Data source                    Original data link  \n0   SoilGrids                 https://soilgrids.org  \n1      Chelsa  http://chelsa-climate.org/downloads/  \n2      Chelsa  http://chelsa-climate.org/downloads/  \n3      Chelsa  http://chelsa-climate.org/downloads/  \n4      Chelsa  http://chelsa-climate.org/downloads/  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Variable name</th>\n      <th>Description</th>\n      <th>Data source</th>\n      <th>Original data link</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>bd20</td>\n      <td>Topsoil bulk density (Mg/m^3, soil fines)</td>\n      <td>SoilGrids</td>\n      <td>https://soilgrids.org</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bio1</td>\n      <td>Mean annual temperature (deg. C * 10, 1979-2013)</td>\n      <td>Chelsa</td>\n      <td>http://chelsa-climate.org/downloads/</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>bio7</td>\n      <td>Mean annual temperature range (deg. C * 10, 19...</td>\n      <td>Chelsa</td>\n      <td>http://chelsa-climate.org/downloads/</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bio12</td>\n      <td>Mean annual precipitation (mm/yr, 1979-2013)</td>\n      <td>Chelsa</td>\n      <td>http://chelsa-climate.org/downloads/</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bio15</td>\n      <td>Mean rainfall seasonality (CV, 1979-2013)</td>\n      <td>Chelsa</td>\n      <td>http://chelsa-climate.org/downloads/</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":138},{"cell_type":"code","source":"#check that the values for woody\ntra_col= train['wcover'].unique()\ntra_col","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.313750Z","iopub.execute_input":"2025-03-04T17:48:30.313944Z","iopub.status.idle":"2025-03-04T17:48:30.319479Z","shell.execute_reply.started":"2025-03-04T17:48:30.313927Z","shell.execute_reply":"2025-03-04T17:48:30.318690Z"}},"outputs":[{"execution_count":139,"output_type":"execute_result","data":{"text/plain":"array(['>60%', '<30%', '>30%'], dtype=object)"},"metadata":{}}],"execution_count":139},{"cell_type":"code","source":"#check for nan values\n# Check for missing values\nmissing_values = train.isna().sum()\n\n# Display only columns with missing values\nmissing_values = missing_values[missing_values > 0]\n\nprint(\"Columns with missing values:\\n\", missing_values)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.402690Z","iopub.execute_input":"2025-03-04T17:48:30.402885Z","iopub.status.idle":"2025-03-04T17:48:30.412721Z","shell.execute_reply.started":"2025-03-04T17:48:30.402869Z","shell.execute_reply":"2025-03-04T17:48:30.412039Z"}},"outputs":[{"name":"stdout","text":"Columns with missing values:\n bd20     45\ncec20    45\nlstd     19\nlstn     19\nmb1       1\nmb2       1\nmb3       1\nmb7       1\nph20     45\nsnd20    45\nsoc20    45\ntim       1\ndtype: int64\n","output_type":"stream"}],"execution_count":140},{"cell_type":"markdown","source":"Drop nan values","metadata":{}},{"cell_type":"code","source":"train.dropna(inplace=True)\ntrain.describe()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.454767Z","iopub.execute_input":"2025-03-04T17:48:30.454978Z","iopub.status.idle":"2025-03-04T17:48:30.559105Z","shell.execute_reply.started":"2025-03-04T17:48:30.454944Z","shell.execute_reply":"2025-03-04T17:48:30.558414Z"}},"outputs":[{"execution_count":141,"output_type":"execute_result","data":{"text/plain":"              subid           lat           lon        bcount             x  \\\ncount  1.579900e+04  15799.000000  15799.000000  15799.000000  1.579900e+04   \nmean   1.540572e+06      7.644421     -5.559655      1.922907 -2.795782e+06   \nstd    4.805531e+03      1.473895      1.500495     13.964009  1.613398e+05   \nmin    1.532219e+06      4.384086     -8.583182      0.000000 -3.128125e+06   \n25%    1.536476e+06      6.435314     -6.828716      0.000000 -2.932875e+06   \n50%    1.540446e+06      7.686858     -5.657151      0.000000 -2.806625e+06   \n75%    1.544914e+06      8.864528     -4.271873      0.000000 -2.658625e+06   \nmax    1.548937e+06     10.702300     -2.514808    347.000000 -2.465125e+06   \n\n                   y          bd20          bio1         bio12          bio7  \\\ncount   15799.000000  15799.000000  15799.000000  15799.000000  15799.000000   \nmean   354856.880794      1.436452    258.896829   1276.319134     65.877144   \nstd    167197.425164      0.163715      6.583892    253.555458     13.189055   \nmin     -6374.979609      1.057500    198.000000    802.000000     43.000000   \n25%    218375.031104      1.287500    255.000000   1096.000000     57.000000   \n50%    359374.949333      1.427500    259.000000   1225.000000     62.000000   \n75%    492374.973142      1.575000    263.000000   1407.000000     73.000000   \nmax    704375.050436      1.865000    277.000000   2586.000000    105.000000   \n\n       ...          mlon          nppm          npps          ph20  \\\ncount  ...  15799.000000  15799.000000  15799.000000  15799.000000   \nmean   ...     -5.560877   5808.028748   1009.628788      5.611906   \nstd    ...      1.500502   3286.585558    317.172357      0.344223   \nmin    ...     -8.584408      0.000000      0.000000      4.600000   \n25%    ...     -6.829952   3390.550049    777.371246      5.400000   \n50%    ...     -5.658371   5209.299805   1021.393616      5.650000   \n75%    ...     -4.273089   7337.399902   1231.642090      5.875000   \nmax    ...     -2.516021  14123.599609   3570.271484      6.675000   \n\n               sirm          sirs         slope         snd20         soc20  \\\ncount  15799.000000  15799.000000  15799.000000  15799.000000  15799.000000   \nmean       0.714734      0.007305      1.511050     55.172416     16.997073   \nstd        0.060466      0.000864      1.614401      7.284763      5.453216   \nmin        0.000000      0.000000      0.000000     32.000000      5.000000   \n25%        0.717635      0.006970      0.778205     49.750000     13.500000   \n50%        0.720157      0.007206      1.217942     55.500000     16.500000   \n75%        0.721898      0.007535      1.742046     60.500000     19.500000   \nmax        0.733020      0.011519     23.151028     76.500000     53.000000   \n\n                tim  \ncount  15799.000000  \nmean      10.333283  \nstd        1.748060  \nmin        5.553461  \n25%        9.065104  \n50%        9.953593  \n75%       11.358078  \nmax       17.559345  \n\n[8 rows x 46 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subid</th>\n      <th>lat</th>\n      <th>lon</th>\n      <th>bcount</th>\n      <th>x</th>\n      <th>y</th>\n      <th>bd20</th>\n      <th>bio1</th>\n      <th>bio12</th>\n      <th>bio7</th>\n      <th>...</th>\n      <th>mlon</th>\n      <th>nppm</th>\n      <th>npps</th>\n      <th>ph20</th>\n      <th>sirm</th>\n      <th>sirs</th>\n      <th>slope</th>\n      <th>snd20</th>\n      <th>soc20</th>\n      <th>tim</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1.579900e+04</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>1.579900e+04</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>...</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n      <td>15799.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.540572e+06</td>\n      <td>7.644421</td>\n      <td>-5.559655</td>\n      <td>1.922907</td>\n      <td>-2.795782e+06</td>\n      <td>354856.880794</td>\n      <td>1.436452</td>\n      <td>258.896829</td>\n      <td>1276.319134</td>\n      <td>65.877144</td>\n      <td>...</td>\n      <td>-5.560877</td>\n      <td>5808.028748</td>\n      <td>1009.628788</td>\n      <td>5.611906</td>\n      <td>0.714734</td>\n      <td>0.007305</td>\n      <td>1.511050</td>\n      <td>55.172416</td>\n      <td>16.997073</td>\n      <td>10.333283</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>4.805531e+03</td>\n      <td>1.473895</td>\n      <td>1.500495</td>\n      <td>13.964009</td>\n      <td>1.613398e+05</td>\n      <td>167197.425164</td>\n      <td>0.163715</td>\n      <td>6.583892</td>\n      <td>253.555458</td>\n      <td>13.189055</td>\n      <td>...</td>\n      <td>1.500502</td>\n      <td>3286.585558</td>\n      <td>317.172357</td>\n      <td>0.344223</td>\n      <td>0.060466</td>\n      <td>0.000864</td>\n      <td>1.614401</td>\n      <td>7.284763</td>\n      <td>5.453216</td>\n      <td>1.748060</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.532219e+06</td>\n      <td>4.384086</td>\n      <td>-8.583182</td>\n      <td>0.000000</td>\n      <td>-3.128125e+06</td>\n      <td>-6374.979609</td>\n      <td>1.057500</td>\n      <td>198.000000</td>\n      <td>802.000000</td>\n      <td>43.000000</td>\n      <td>...</td>\n      <td>-8.584408</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>4.600000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>32.000000</td>\n      <td>5.000000</td>\n      <td>5.553461</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.536476e+06</td>\n      <td>6.435314</td>\n      <td>-6.828716</td>\n      <td>0.000000</td>\n      <td>-2.932875e+06</td>\n      <td>218375.031104</td>\n      <td>1.287500</td>\n      <td>255.000000</td>\n      <td>1096.000000</td>\n      <td>57.000000</td>\n      <td>...</td>\n      <td>-6.829952</td>\n      <td>3390.550049</td>\n      <td>777.371246</td>\n      <td>5.400000</td>\n      <td>0.717635</td>\n      <td>0.006970</td>\n      <td>0.778205</td>\n      <td>49.750000</td>\n      <td>13.500000</td>\n      <td>9.065104</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.540446e+06</td>\n      <td>7.686858</td>\n      <td>-5.657151</td>\n      <td>0.000000</td>\n      <td>-2.806625e+06</td>\n      <td>359374.949333</td>\n      <td>1.427500</td>\n      <td>259.000000</td>\n      <td>1225.000000</td>\n      <td>62.000000</td>\n      <td>...</td>\n      <td>-5.658371</td>\n      <td>5209.299805</td>\n      <td>1021.393616</td>\n      <td>5.650000</td>\n      <td>0.720157</td>\n      <td>0.007206</td>\n      <td>1.217942</td>\n      <td>55.500000</td>\n      <td>16.500000</td>\n      <td>9.953593</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.544914e+06</td>\n      <td>8.864528</td>\n      <td>-4.271873</td>\n      <td>0.000000</td>\n      <td>-2.658625e+06</td>\n      <td>492374.973142</td>\n      <td>1.575000</td>\n      <td>263.000000</td>\n      <td>1407.000000</td>\n      <td>73.000000</td>\n      <td>...</td>\n      <td>-4.273089</td>\n      <td>7337.399902</td>\n      <td>1231.642090</td>\n      <td>5.875000</td>\n      <td>0.721898</td>\n      <td>0.007535</td>\n      <td>1.742046</td>\n      <td>60.500000</td>\n      <td>19.500000</td>\n      <td>11.358078</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.548937e+06</td>\n      <td>10.702300</td>\n      <td>-2.514808</td>\n      <td>347.000000</td>\n      <td>-2.465125e+06</td>\n      <td>704375.050436</td>\n      <td>1.865000</td>\n      <td>277.000000</td>\n      <td>2586.000000</td>\n      <td>105.000000</td>\n      <td>...</td>\n      <td>-2.516021</td>\n      <td>14123.599609</td>\n      <td>3570.271484</td>\n      <td>6.675000</td>\n      <td>0.733020</td>\n      <td>0.011519</td>\n      <td>23.151028</td>\n      <td>76.500000</td>\n      <td>53.000000</td>\n      <td>17.559345</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows Ã— 46 columns</p>\n</div>"},"metadata":{}}],"execution_count":141},{"cell_type":"code","source":"# Ammount of variables after preprocessing\ntrain.info(verbose=True, show_counts=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.560058Z","iopub.execute_input":"2025-03-04T17:48:30.560319Z","iopub.status.idle":"2025-03-04T17:48:30.577325Z","shell.execute_reply.started":"2025-03-04T17:48:30.560291Z","shell.execute_reply":"2025-03-04T17:48:30.576639Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 15799 entries, 0 to 15855\nData columns (total 49 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   subid     15799 non-null  int64  \n 1   lat       15799 non-null  float64\n 2   lon       15799 non-null  float64\n 3   building  15799 non-null  object \n 4   cropland  15799 non-null  object \n 5   wcover    15799 non-null  object \n 6   bcount    15799 non-null  float64\n 7   x         15799 non-null  float64\n 8   y         15799 non-null  float64\n 9   bd20      15799 non-null  float64\n 10  bio1      15799 non-null  int64  \n 11  bio12     15799 non-null  int64  \n 12  bio7      15799 non-null  int64  \n 13  bio15     15799 non-null  int64  \n 14  cec20     15799 non-null  float64\n 15  dipa      15799 non-null  float64\n 16  dni       15799 non-null  float64\n 17  dnlt      15799 non-null  float64\n 18  dnpa      15799 non-null  float64\n 19  dor1      15799 non-null  float64\n 20  dor2      15799 non-null  float64\n 21  fpara     15799 non-null  float64\n 22  fpars     15799 non-null  float64\n 23  lcc10     15799 non-null  int64  \n 24  lcc11     15799 non-null  int64  \n 25  lcc12     15799 non-null  int64  \n 26  lcc13     15799 non-null  int64  \n 27  lcc14     15799 non-null  int64  \n 28  lcc21     15799 non-null  int64  \n 29  lcc8      15799 non-null  int64  \n 30  lcc9      15799 non-null  int64  \n 31  lstd      15799 non-null  float64\n 32  lstn      15799 non-null  float64\n 33  mb1       15799 non-null  float64\n 34  mb2       15799 non-null  float64\n 35  mb3       15799 non-null  float64\n 36  mb7       15799 non-null  float64\n 37  mdem      15799 non-null  int64  \n 38  mlat      15799 non-null  float64\n 39  mlon      15799 non-null  float64\n 40  nppm      15799 non-null  float64\n 41  npps      15799 non-null  float64\n 42  ph20      15799 non-null  float64\n 43  sirm      15799 non-null  float64\n 44  sirs      15799 non-null  float64\n 45  slope     15799 non-null  float64\n 46  snd20     15799 non-null  float64\n 47  soc20     15799 non-null  float64\n 48  tim       15799 non-null  float64\ndtypes: float64(32), int64(14), object(3)\nmemory usage: 6.0+ MB\n","output_type":"stream"}],"execution_count":142},{"cell_type":"code","source":"# Ammount of variables after preprocessing\ntest.info(verbose=True, show_counts=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.578233Z","iopub.execute_input":"2025-03-04T17:48:30.578501Z","iopub.status.idle":"2025-03-04T17:48:30.587874Z","shell.execute_reply.started":"2025-03-04T17:48:30.578481Z","shell.execute_reply":"2025-03-04T17:48:30.587130Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 35 entries, 0 to 34\nData columns (total 46 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   subid   35 non-null     int64  \n 1   lat     35 non-null     float64\n 2   lon     35 non-null     float64\n 3   bcount  0 non-null      float64\n 4   x       35 non-null     float64\n 5   y       35 non-null     float64\n 6   bd20    35 non-null     float64\n 7   bio1    35 non-null     int64  \n 8   bio12   35 non-null     int64  \n 9   bio7    35 non-null     int64  \n 10  bio15   35 non-null     int64  \n 11  cec20   35 non-null     float64\n 12  dipa    35 non-null     float64\n 13  dni     35 non-null     float64\n 14  dnlt    35 non-null     float64\n 15  dnpa    35 non-null     float64\n 16  dor1    35 non-null     float64\n 17  dor2    35 non-null     float64\n 18  fpara   35 non-null     float64\n 19  fpars   35 non-null     float64\n 20  lcc10   35 non-null     int64  \n 21  lcc11   35 non-null     int64  \n 22  lcc12   35 non-null     int64  \n 23  lcc13   35 non-null     int64  \n 24  lcc14   35 non-null     int64  \n 25  lcc21   35 non-null     int64  \n 26  lcc8    35 non-null     int64  \n 27  lcc9    35 non-null     int64  \n 28  lstd    35 non-null     float64\n 29  lstn    35 non-null     float64\n 30  mb1     35 non-null     float64\n 31  mb2     35 non-null     float64\n 32  mb3     35 non-null     float64\n 33  mb7     35 non-null     float64\n 34  mdem    35 non-null     int64  \n 35  mlat    35 non-null     float64\n 36  mlon    35 non-null     float64\n 37  nppm    35 non-null     float64\n 38  npps    35 non-null     float64\n 39  ph20    35 non-null     float64\n 40  sirm    35 non-null     float64\n 41  sirs    35 non-null     float64\n 42  slope   35 non-null     float64\n 43  snd20   35 non-null     float64\n 44  soc20   35 non-null     float64\n 45  tim     35 non-null     float64\ndtypes: float64(32), int64(14)\nmemory usage: 12.7 KB\n","output_type":"stream"}],"execution_count":143},{"cell_type":"code","source":"\n\n# # # Target Variables (dependent)\n# # train['building'] = train['building'].map({'Yes': 1, 'No': 0})\n# # train['cropland'] = train['cropland'].map({'Yes': 1, 'No': 0})\n# lb = LabelBinarizer()\n# train[ 'cropland'] =lb.fit_transform(train['cropland'])\n# train['building'] = lb.fit_transform(train['building'])\n\n# # Encode Woody Vegetation Cover (Multi-class: 0, 1, 2)\n# woody_encoder = LabelEncoder()\n# train['wcover'] = woody_encoder.fit_transform(train['wcover'])\n\n# train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.607008Z","iopub.execute_input":"2025-03-04T17:48:30.607228Z","iopub.status.idle":"2025-03-04T17:48:30.610342Z","shell.execute_reply.started":"2025-03-04T17:48:30.607209Z","shell.execute_reply":"2025-03-04T17:48:30.609702Z"}},"outputs":[],"execution_count":144},{"cell_type":"code","source":"\n\n# # Convert categorical labels to binary\n# # 'Building' and 'Cropland' are 'Yes'/'No' columns\nlb = LabelBinarizer()\ntrain[ 'cropland'] =lb.fit_transform(train['cropland'])\ntrain['building'] = lb.fit_transform(train['building'])\n\n# One-hot encode 'wcover'\nohe = OneHotEncoder(sparse_output=False,dtype=int)\nwcover_encoded = ohe.fit_transform(train[['wcover']])\nwcover_columns = ohe.get_feature_names_out(['wcover'])\ntrain[wcover_columns] = wcover_encoded\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.642837Z","iopub.execute_input":"2025-03-04T17:48:30.643083Z","iopub.status.idle":"2025-03-04T17:48:30.716114Z","shell.execute_reply.started":"2025-03-04T17:48:30.643063Z","shell.execute_reply":"2025-03-04T17:48:30.715504Z"}},"outputs":[],"execution_count":145},{"cell_type":"code","source":"train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.717149Z","iopub.execute_input":"2025-03-04T17:48:30.717418Z","iopub.status.idle":"2025-03-04T17:48:30.736776Z","shell.execute_reply.started":"2025-03-04T17:48:30.717399Z","shell.execute_reply":"2025-03-04T17:48:30.736002Z"}},"outputs":[{"execution_count":146,"output_type":"execute_result","data":{"text/plain":"     subid       lat       lon  building  cropland wcover  bcount  \\\n0  1548937  7.387687 -4.780390         0         0   >60%     0.0   \n1  1548936  8.690266 -5.770243         0         1   <30%     0.0   \n2  1548935  8.518763 -2.808147         0         1   <30%     0.0   \n3  1548934  8.637725 -3.048867         0         0   <30%     0.0   \n4  1548933  7.993474 -6.044227         0         0   <30%     0.0   \n\n              x              y    bd20  ...   ph20      sirm      sirs  \\\n0 -2.714375e+06  321874.969864  1.4900  ...  6.100  0.717054  0.008259   \n1 -2.812625e+06  474124.973063  1.2925  ...  5.575  0.717198  0.007242   \n2 -2.495125e+06  440374.986977  1.3050  ...  5.850  0.717171  0.006744   \n3 -2.520375e+06  454875.008083  1.3275  ...  5.950  0.718244  0.007917   \n4 -2.846625e+06  396624.944149  1.4200  ...  5.800  0.716653  0.007022   \n\n      slope  snd20  soc20        tim  wcover_<30%  wcover_>30%  wcover_>60%  \n0  0.729217  66.75  12.25   8.079082            0            0            1  \n1  1.086981  51.50  14.25   9.549431            1            0            0  \n2  1.159993  47.00  14.50  10.523131            1            0            0  \n3  2.471163  62.75  12.75   9.305363            1            0            0  \n4  0.259416  55.00  13.25  15.732859            1            0            0  \n\n[5 rows x 52 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>subid</th>\n      <th>lat</th>\n      <th>lon</th>\n      <th>building</th>\n      <th>cropland</th>\n      <th>wcover</th>\n      <th>bcount</th>\n      <th>x</th>\n      <th>y</th>\n      <th>bd20</th>\n      <th>...</th>\n      <th>ph20</th>\n      <th>sirm</th>\n      <th>sirs</th>\n      <th>slope</th>\n      <th>snd20</th>\n      <th>soc20</th>\n      <th>tim</th>\n      <th>wcover_&lt;30%</th>\n      <th>wcover_&gt;30%</th>\n      <th>wcover_&gt;60%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1548937</td>\n      <td>7.387687</td>\n      <td>-4.780390</td>\n      <td>0</td>\n      <td>0</td>\n      <td>&gt;60%</td>\n      <td>0.0</td>\n      <td>-2.714375e+06</td>\n      <td>321874.969864</td>\n      <td>1.4900</td>\n      <td>...</td>\n      <td>6.100</td>\n      <td>0.717054</td>\n      <td>0.008259</td>\n      <td>0.729217</td>\n      <td>66.75</td>\n      <td>12.25</td>\n      <td>8.079082</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1548936</td>\n      <td>8.690266</td>\n      <td>-5.770243</td>\n      <td>0</td>\n      <td>1</td>\n      <td>&lt;30%</td>\n      <td>0.0</td>\n      <td>-2.812625e+06</td>\n      <td>474124.973063</td>\n      <td>1.2925</td>\n      <td>...</td>\n      <td>5.575</td>\n      <td>0.717198</td>\n      <td>0.007242</td>\n      <td>1.086981</td>\n      <td>51.50</td>\n      <td>14.25</td>\n      <td>9.549431</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1548935</td>\n      <td>8.518763</td>\n      <td>-2.808147</td>\n      <td>0</td>\n      <td>1</td>\n      <td>&lt;30%</td>\n      <td>0.0</td>\n      <td>-2.495125e+06</td>\n      <td>440374.986977</td>\n      <td>1.3050</td>\n      <td>...</td>\n      <td>5.850</td>\n      <td>0.717171</td>\n      <td>0.006744</td>\n      <td>1.159993</td>\n      <td>47.00</td>\n      <td>14.50</td>\n      <td>10.523131</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1548934</td>\n      <td>8.637725</td>\n      <td>-3.048867</td>\n      <td>0</td>\n      <td>0</td>\n      <td>&lt;30%</td>\n      <td>0.0</td>\n      <td>-2.520375e+06</td>\n      <td>454875.008083</td>\n      <td>1.3275</td>\n      <td>...</td>\n      <td>5.950</td>\n      <td>0.718244</td>\n      <td>0.007917</td>\n      <td>2.471163</td>\n      <td>62.75</td>\n      <td>12.75</td>\n      <td>9.305363</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1548933</td>\n      <td>7.993474</td>\n      <td>-6.044227</td>\n      <td>0</td>\n      <td>0</td>\n      <td>&lt;30%</td>\n      <td>0.0</td>\n      <td>-2.846625e+06</td>\n      <td>396624.944149</td>\n      <td>1.4200</td>\n      <td>...</td>\n      <td>5.800</td>\n      <td>0.716653</td>\n      <td>0.007022</td>\n      <td>0.259416</td>\n      <td>55.00</td>\n      <td>13.25</td>\n      <td>15.732859</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 52 columns</p>\n</div>"},"metadata":{}}],"execution_count":146},{"cell_type":"code","source":"\n# Exclude variables from features (including wcover one-hot columns)\nexclude_vars = ['subid', 'building', 'cropland', 'wcover', 'bcount']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.737900Z","iopub.execute_input":"2025-03-04T17:48:30.738140Z","iopub.status.idle":"2025-03-04T17:48:30.741303Z","shell.execute_reply.started":"2025-03-04T17:48:30.738122Z","shell.execute_reply":"2025-03-04T17:48:30.740514Z"}},"outputs":[],"execution_count":147},{"cell_type":"code","source":"#Define features (X) and target (y)\nX = train.drop(columns=exclude_vars + list(wcover_columns))  # Drop all non-feature columns\ny = train[['building', 'cropland'] + list(wcover_columns)]   # Include binary & one-hot targets","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.743780Z","iopub.execute_input":"2025-03-04T17:48:30.744058Z","iopub.status.idle":"2025-03-04T17:48:30.757110Z","shell.execute_reply.started":"2025-03-04T17:48:30.744027Z","shell.execute_reply":"2025-03-04T17:48:30.756285Z"}},"outputs":[],"execution_count":148},{"cell_type":"code","source":"# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(\n    X,y, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T17:48:30.823832Z","iopub.execute_input":"2025-03-04T17:48:30.824069Z","iopub.status.idle":"2025-03-04T17:48:30.832660Z","shell.execute_reply.started":"2025-03-04T17:48:30.824050Z","shell.execute_reply":"2025-03-04T17:48:30.831774Z"}},"outputs":[],"execution_count":152},{"cell_type":"code","source":"import numpy as np\nimport xgboost as xgb\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.model_selection import train_test_split\n\n\n\n# Define base XGBoost classifier\nbase_model = xgb.XGBClassifier(objective=\"binary:logistic\", eval_metric=\"logloss\",multi_strategy='multi_output_tree')  # For binary outputs\n\n# Wrap in MultiOutputClassifier to handle multiple outputs\nmodel = MultiOutputClassifier(base_model)\n\n# Train the model,\nmodel.fit(X_train, y_train)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T18:03:48.685393Z","iopub.execute_input":"2025-03-04T18:03:48.685706Z","iopub.status.idle":"2025-03-04T18:03:51.025905Z","shell.execute_reply.started":"2025-03-04T18:03:48.685678Z","shell.execute_reply":"2025-03-04T18:03:51.025216Z"}},"outputs":[{"execution_count":164,"output_type":"execute_result","data":{"text/plain":"MultiOutputClassifier(estimator=XGBClassifier(base_score=None, booster=None,\n                                              callbacks=None,\n                                              colsample_bylevel=None,\n                                              colsample_bynode=None,\n                                              colsample_bytree=None,\n                                              device=None,\n                                              early_stopping_rounds=None,\n                                              enable_categorical=False,\n                                              eval_metric='logloss',\n                                              feature_types=None, gamma=None,\n                                              grow_policy=None,\n                                              importance_type=None,\n                                              interaction_constraints=None,\n                                              learning_rate=None, max_bin=None,\n                                              max_cat_threshold=None,\n                                              max_cat_to_onehot=None,\n                                              max_delta_step=None,\n                                              max_depth=None, max_leaves=None,\n                                              min_child_weight=None,\n                                              missing=nan,\n                                              monotone_constraints=None,\n                                              multi_strategy='multi_output_tree',\n                                              n_estimators=None, n_jobs=None,\n                                              num_parallel_tree=None,\n                                              random_state=None, ...))","text/html":"<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultiOutputClassifier(estimator=XGBClassifier(base_score=None, booster=None,\n                                              callbacks=None,\n                                              colsample_bylevel=None,\n                                              colsample_bynode=None,\n                                              colsample_bytree=None,\n                                              device=None,\n                                              early_stopping_rounds=None,\n                                              enable_categorical=False,\n                                              eval_metric=&#x27;logloss&#x27;,\n                                              feature_types=None, gamma=None,\n                                              grow_policy=None,\n                                              importance_type=None,\n                                              interaction_constraints=None,\n                                              learning_rate=None, max_bin=None,\n                                              max_cat_threshold=None,\n                                              max_cat_to_onehot=None,\n                                              max_delta_step=None,\n                                              max_depth=None, max_leaves=None,\n                                              min_child_weight=None,\n                                              missing=nan,\n                                              monotone_constraints=None,\n                                              multi_strategy=&#x27;multi_output_tree&#x27;,\n                                              n_estimators=None, n_jobs=None,\n                                              num_parallel_tree=None,\n                                              random_state=None, ...))</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultiOutputClassifier</label><div class=\"sk-toggleable__content\"><pre>MultiOutputClassifier(estimator=XGBClassifier(base_score=None, booster=None,\n                                              callbacks=None,\n                                              colsample_bylevel=None,\n                                              colsample_bynode=None,\n                                              colsample_bytree=None,\n                                              device=None,\n                                              early_stopping_rounds=None,\n                                              enable_categorical=False,\n                                              eval_metric=&#x27;logloss&#x27;,\n                                              feature_types=None, gamma=None,\n                                              grow_policy=None,\n                                              importance_type=None,\n                                              interaction_constraints=None,\n                                              learning_rate=None, max_bin=None,\n                                              max_cat_threshold=None,\n                                              max_cat_to_onehot=None,\n                                              max_delta_step=None,\n                                              max_depth=None, max_leaves=None,\n                                              min_child_weight=None,\n                                              missing=nan,\n                                              monotone_constraints=None,\n                                              multi_strategy=&#x27;multi_output_tree&#x27;,\n                                              n_estimators=None, n_jobs=None,\n                                              num_parallel_tree=None,\n                                              random_state=None, ...))</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n              feature_types=None, gamma=None, grow_policy=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_bin=None, max_cat_threshold=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, multi_strategy=&#x27;multi_output_tree&#x27;,\n              n_estimators=None, n_jobs=None, num_parallel_tree=None,\n              random_state=None, ...)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n              feature_types=None, gamma=None, grow_policy=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_bin=None, max_cat_threshold=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, multi_strategy=&#x27;multi_output_tree&#x27;,\n              n_estimators=None, n_jobs=None, num_parallel_tree=None,\n              random_state=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":164},{"cell_type":"code","source":"# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model using Hamming loss\nloss = hamming_loss(y_test, y_pred)\nprint(\"Hamming Loss:\", loss)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T18:03:54.325900Z","iopub.execute_input":"2025-03-04T18:03:54.326216Z","iopub.status.idle":"2025-03-04T18:03:54.379475Z","shell.execute_reply.started":"2025-03-04T18:03:54.326192Z","shell.execute_reply":"2025-03-04T18:03:54.378703Z"}},"outputs":[{"name":"stdout","text":"Hamming Loss: 0.21537974683544303\n","output_type":"stream"}],"execution_count":165},{"cell_type":"code","source":"import pandas as pd\n\n# Obtain predicted probabilities for each label; this returns a list of arrays,\n# one per output classifier.\nproba_list = model.predict_proba(X_test)\n\n# If y_test is a DataFrame, we can use its columns as class names; otherwise, define them manually.\nif isinstance(y_test, pd.DataFrame):\n    class_names = y_test.columns.tolist()\nelse:\n    # For example, if there are three outputs, create default names.\n    class_names = [f'Class{i+1}' for i in range(len(proba_list))]\n\n# Extract the probability for the positive class (class 1) from each array.\n# Each element in proba_list is of shape (n_samples, 2).\npositive_probs = {\n    class_name: proba[:, 1] for class_name, proba in zip(class_names, proba_list)\n}\n\n# Create a DataFrame from the dictionary.\ndf_proba = pd.DataFrame(positive_probs, index=(y_test.index if isinstance(y_test, pd.DataFrame) else None))\n\n# Display the first few rows of the DataFrame containing class probabilities.\nprint(df_proba.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-04T18:17:03.235457Z","iopub.execute_input":"2025-03-04T18:17:03.235785Z","iopub.status.idle":"2025-03-04T18:17:03.287535Z","shell.execute_reply.started":"2025-03-04T18:17:03.235762Z","shell.execute_reply":"2025-03-04T18:17:03.286779Z"}},"outputs":[{"name":"stdout","text":"       building  cropland  wcover_<30%  wcover_>30%  wcover_>60%\n3981   0.005527  0.534821     0.286439     0.168684     0.158378\n292    0.003456  0.187452     0.291934     0.152533     0.391126\n3992   0.000273  0.023246     0.101004     0.160739     0.186460\n12234  0.000824  0.022724     0.155826     0.560272     0.710096\n1375   0.003966  0.015465     0.023142     0.142311     0.839785\n","output_type":"stream"}],"execution_count":170},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}